<#@ template debug="false" hostspecific="false" language="C#" #><#@
assembly name="System.Core" #><#@
import namespace="System.Linq" #><#@
import namespace="System.Text" #><#@
import namespace="System.Collections.Generic" #><#@
include file="SolutionAssemblyInfo.settings.tt" #><#@
output extension=".cs" #><#
var version = new StringBuilder().AppendFormat("{0}.{1}.{2}", Settings.MajorNumber, Settings.MinorNumber, Settings.PatchNumber);
var info = new StringBuilder(version.ToString());
var buildLevel = Settings.BuildLevel ?? BuildLevels.None;

if(buildLevel != BuildLevels.None) info.Append(Settings.BuildLevelSuffix);

if(Settings.BuildNumber.HasValue) info.Append(Settings.BuildNumber);
#>using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyCompany("<#= Settings.Company #>")]
[assembly: AssemblyProduct("<#= Settings.Product #>")]
[assembly: AssemblyCopyright("Copyright © <#= Settings.Company #> <#= DateTime.Now.Year #>")]
[assembly: ComVisible(false)]
[assembly: AssemblyVersion("<#= version #>")]
<# if(buildLevel != BuildLevels.None){ #>

// semver.org tells us to use major.minor.patch[-label[.build]] (e.g. 0.1.3-beta.2),
// but nuget.org requires major.minor.patch[-label[build]] (e.g. 0.1.3-beta2)
// more info: http://docs.nuget.org/docs/reference/versioning
[assembly: AssemblyInformationalVersion("<#= info #>")]<# } #>